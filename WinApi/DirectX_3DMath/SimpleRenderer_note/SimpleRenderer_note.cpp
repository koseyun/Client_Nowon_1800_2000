/*
	Simple Software Renderer  <-- 학습용 예시

	해당 학습용 예시의 목적
	1. 3D 그래픽스 프로그래밍에 기반지식이 되는 게임수학 입문에 대한 심화이해
	2. 3D 그래픽스의 기반구조가 되는 랜더링 파이프라인에 대한 심화이해

	--> DirectX 활용

	DirectX : 마이크로소프트사에서 만든 저수준 그래픽 API 모음집(그래픽 카드의 기능 제어)
	<-- 이것을 활용하여 프로그래밍하려면, 게임 그래픽스 수학지식과 랜더링 파이프라인에 대한 이해가 있어야만 한다

	램버트 조명모델(고전적인 난반사광 모델)

	--------------------------------------------------------------------------------------------------------------------------
	WinSimpleRenderer_step6

	현재 코드는 삼각형들이 기록된 데이터의 순서대로 랜더링 되고 있다
	이것은 실제로 임의의 삼각형이 카메라에서 얼마나 멀리 떨어져 있는지를 반영하고 있지 않다
	그래서 뒤에 있어서 가려져야 할 삼각형이 보이는 현상이 일어나고 있다
	<- 이를 해결하기 위해서는 카메라에서 얼마나 멀리 떨어져 있는지 수치를 기준으로 삼각형들을 정렬하는 것이 필요하다

	Display()
	{
		render(slimeA);
		
		render(slimeB);
	}

	Load
	slimeA
	slimeB

	Display()
	{
		for(삼각형들을 관리하는 자료구조)
		{
			displaytriangle(임의의 슬라임)
		}
	}

	오름차순 정렬 : 작은 것 ---> 큰 것
					1 2 3 4 5
	내림차순 정렬 : 큰 것 ---> 작은 것
					5 4 3 2 1

	가까운 것이 먼 것보다 앞에 보이게 랜더링하려면 내림차순 정렬을 해야한다


	함수 사용의 3단계
		선언, 정의, 호출

	함수 : 코드를 추상화(여러 항목들을 묶어놓고 이름을 붙인것) <-- 기능(function)

	int DoAdd(int tA, int tB);

	DoAdd

	함수의 정의
	int DoAdd(int tA, int tB)
	{
		int tResult = 0;

		tResult = tA + tB;

		retutn tResult;
	}

	람다함수 기본 형식
	[이름X](매개변수){정의부분}










*/