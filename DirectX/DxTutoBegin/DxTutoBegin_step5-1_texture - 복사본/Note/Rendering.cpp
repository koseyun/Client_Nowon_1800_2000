/*	
										DirectX 11의 랜더링 파이프라인의 개요
	
	========================================================================================================================
	기하단계										래스터라이즈
	========================================================================================================================
	IA						Vertex Shading			|	Pixel Shading					OM
	========================================================================================================================

	Input
	Assembler				Vertex Shader			|	Pixel Shader(PS)				Output Merger
																						프레임 버퍼들을 최종적으로 병합


	다루는 데이터들 :
	VB
	IB
	vertex layout																		
	topology																			Depth/Stencil Buffer(Depth Buffer)
																						Render Target View(Back Buffer)
	========================================================================================================================
							|							texture buffer				|
							|							constant buffer				|
	========================================================================================================================

	HLSL									Blob
	Shader SourceCode File ---> 컴파일 ---> 바이트 코드 ByteCode (중간 결과물)

	가장 기본적인 빛 종류 : 직사광(Directionial Light)
	<-- 태양을 모사해서 만든 조명모델
	--> 위치는 관계없다. 회전값만 물체에 영향을 미친다

	텍스쳐 좌표계
	UV 좌표계 : 가로축이 u, 세로축이 v, 원점은 왼쪽상단, 축들은 [0,1]로 정규화 되어있다

	샘플링
		텍스쳐의 UV좌표를 정점에 기록하여 텍셀이 어떻게 면의 임의의 지점에 대응하여 색칠될지를 결정하는 방법이다
		그런데 최종색상을 표시하는 픽셀의 개수는 텍셀과 일대일로 매칭되지 않으므로
		모자라거나 넘쳐나는 픽셀의 색을 어떻게 텍셀과 대응시켜 칠할지 결정하는 방법이라고 할 수 있다


*/

//--------------------------------------------------------------------------------------------------------------------------

/*	
	임의의 크기에 임의의 방향의 벡터 = 목적지점 - 시작지점

	정규화 : 크기를 1로 만든다
	임의의 크기에 임의의 방향의 벡터 * 1/크기


	렌더링(Rendering) : 3D 월드에 있는 정점 단위의 물체들을 최종적으로 2D 모니터의 픽셀 단위의 프레임으로 만드는 것

	렌더링 파이프라인 : 렌더링의 단계별 공정들의 집합

		다음은 일반적인 공정 분류이다

		----------------------------------------------------------------------------------------------------
		응용단계                          기하(geometry)단계                          래스터라이즈 단계
		----------------------------------------------------------------------------------------------------
		            월드변환     뷰변환        투영변환				뷰포트변환
						                       (3D->2D)				임의의 스크린 영역에 2D표시
                    이동         이동
					회전         회전
					비례

		----------------------------------------------------------------------------------------------------
		CPU, RAM                            GPU, VRAM                                  GPU, VRAM


		                 정점단위로 데이터를 다룬다                                    픽셀단위로 데이터를 다룬다
						 연속적인 공간                                                 불연속적인 공간이다
						 vertex shader가 위치한다                                      pixel shader가 위치한다


	shader : 셰이딩(최종 색상 결정)을 수행하는 작은 조각프로그램
	- vertex shader : 정점단위로 셰이딩 프로그램을 수행한다
	- pixel shader : 픽셀단위로 셰이딩 프로그램을 수행한다

	변환(Transform) : 자기자신으로의 사상(매핑, 대응)

	---------------------------------------------------------------------------------------------------------------------------
	M = TRS
		(이동행렬, 회전행렬, 스케일행렬)

	동차 좌표계(homogeneous coordinate) : n차원 사영 공간을 n+1개의 좌표로 나타내는 좌표계
	그래픽스 이론에서 n차원에서 표현하기 어려운 것을 n+1차원의 힘을 빌어 표현하는 것이다

	회전(rotation) : 벡터가 크기는 그대로이고 방향을 바꾸는 것

	임의의 크기에 임의의 방향의 벡터 = 목적지점 - 시작지점

	정규화 : 크기를 1로 만든다
	임의의 크기에 임의의 방향의 벡터 * 1/크기

	원근 투영(perspective) : 원근감 O

	직교 투영(orthographic) : 원근감 X
*/


